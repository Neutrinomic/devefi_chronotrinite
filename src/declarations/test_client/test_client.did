type TID = nat64;
type Slice = 
 service {
   chrono_query: (vec QueryReq) -> (vec QueryResp) query;
   insert: (vec InsertReq) -> ();
   subscribe: (text) -> ();
 };
type SearchResp = 
 vec record {
       C_Path;
       ChronoChannelShared;
     };
type SearchReq = vec ChannelSearchReq;
type QueryResp = variant {search: SearchResp;};
type QueryReq = variant {search: SearchReq;};
type InsertReq = 
 record {
   data: ChronoChannelShared;
   path: C_Path;
 };
type Direction = 
 variant {
   bwd;
   fwd;
 };
type ChronoEvent_6 = 
 record {
   TID;
   text;
 };
type ChronoEvent_5 = 
 record {
   TID;
   nat;
 };
type ChronoEvent_4 = 
 record {
   TID;
   int;
 };
type ChronoEvent_3 = 
 record {
   TID;
   float64;
 };
type ChronoEvent_2 = 
 record {
   TID;
   blob;
 };
type ChronoEvent_1 = 
 record {
   TID;
   vec record {
         float64;
         nat;
       };
 };
type ChronoEvent = 
 record {
   TID;
   vec float64;
 };
type ChronoChannelShared = 
 variant {
   AF: vec ChronoEvent;
   AFN: vec ChronoEvent_1;
   CANDID: vec ChronoEvent_2;
   FLOAT: vec ChronoEvent_3;
   INT: vec ChronoEvent_4;
   NAT: vec ChronoEvent_5;
   TEXT: vec ChronoEvent_6;
 };
type ChannelSearchReq = 
 record {
   direction: Direction;
   from: nat64;
   limit: nat;
   path: variant {
           exact: C_Path;
           prefix: C_Path;
         };
 };
type C_Path = text;
service : (record {router: principal;}) -> Slice
